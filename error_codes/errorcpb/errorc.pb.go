// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Grpc_course/error_codes/errorcpb/errorc.proto

package errorcpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SquareRootRequest struct {
	Number               float32  `protobuf:"fixed32,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootRequest) Reset()         { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()    {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76cd24f7d3974c70, []int{0}
}

func (m *SquareRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootRequest.Unmarshal(m, b)
}
func (m *SquareRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootRequest.Marshal(b, m, deterministic)
}
func (m *SquareRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootRequest.Merge(m, src)
}
func (m *SquareRootRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRootRequest.Size(m)
}
func (m *SquareRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootRequest proto.InternalMessageInfo

func (m *SquareRootRequest) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	Root                 float64  `protobuf:"fixed64,1,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootResponse) Reset()         { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()    {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76cd24f7d3974c70, []int{1}
}

func (m *SquareRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootResponse.Unmarshal(m, b)
}
func (m *SquareRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootResponse.Marshal(b, m, deterministic)
}
func (m *SquareRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootResponse.Merge(m, src)
}
func (m *SquareRootResponse) XXX_Size() int {
	return xxx_messageInfo_SquareRootResponse.Size(m)
}
func (m *SquareRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootResponse proto.InternalMessageInfo

func (m *SquareRootResponse) GetRoot() float64 {
	if m != nil {
		return m.Root
	}
	return 0
}

func init() {
	proto.RegisterType((*SquareRootRequest)(nil), "errorc.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "errorc.SquareRootResponse")
}

func init() {
	proto.RegisterFile("Grpc_course/error_codes/errorcpb/errorc.proto", fileDescriptor_76cd24f7d3974c70)
}

var fileDescriptor_76cd24f7d3974c70 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xb1, 0xca, 0xc2, 0x40,
	0x10, 0x84, 0xff, 0xfc, 0x48, 0x90, 0xed, 0xb2, 0x85, 0x68, 0x2a, 0x49, 0x15, 0x10, 0x23, 0xe8,
	0x1b, 0x28, 0x62, 0x7f, 0xe9, 0xd2, 0x84, 0xe4, 0xdc, 0x42, 0x88, 0xd9, 0xcb, 0xde, 0x9d, 0xcf,
	0x2f, 0x24, 0x27, 0x0a, 0xda, 0x7d, 0xc3, 0xce, 0x32, 0x33, 0xb0, 0xbd, 0x88, 0xd1, 0xb5, 0x66,
	0x2f, 0x96, 0x76, 0x24, 0xc2, 0x52, 0x6b, 0xbe, 0x92, 0x9d, 0x58, 0x9b, 0x36, 0x40, 0x61, 0x84,
	0x1d, 0x63, 0x3c, 0xa9, 0x6c, 0x03, 0x49, 0x39, 0xf8, 0x46, 0x48, 0x31, 0x3b, 0x45, 0x83, 0x27,
	0xeb, 0x70, 0x01, 0x71, 0xef, 0xef, 0x2d, 0xc9, 0x32, 0x5a, 0x47, 0xf9, 0xbf, 0x0a, 0x2a, 0xcb,
	0x01, 0x3f, 0xcd, 0xd6, 0x70, 0x6f, 0x09, 0x11, 0x66, 0xc2, 0xec, 0x46, 0x6f, 0xa4, 0x46, 0xde,
	0x57, 0x90, 0x9c, 0x9a, 0x4e, 0xfb, 0xae, 0x71, 0x2c, 0x25, 0xc9, 0xe3, 0xa6, 0x09, 0xcf, 0x00,
	0xef, 0x77, 0x5c, 0x15, 0xa1, 0xd0, 0x57, 0x7e, 0x9a, 0xfe, 0x3a, 0x4d, 0x69, 0xd9, 0xdf, 0x11,
	0xaa, 0xf9, 0x6b, 0x53, 0x1b, 0x8f, 0x6b, 0x0e, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xbb,
	0x30, 0x22, 0xfe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	//error handling
	//This RPC will throw an error if the sent number is negative
	//The error being sent is of type INVALID_ARGUMENT
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type calculatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorServiceClient(cc *grpc.ClientConn) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/errorc.CalculatorService/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	//error handling
	//This RPC will throw an error if the sent number is negative
	//The error being sent is of type INVALID_ARGUMENT
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorc.CalculatorService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "errorc.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SquareRoot",
			Handler:    _CalculatorService_SquareRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Grpc_course/error_codes/errorcpb/errorc.proto",
}
